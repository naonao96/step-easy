-- Áµ±ÂêàÂûãRLS‰øÆÊ≠£Ôºödaily_messages„ÉÜ„Éº„Éñ„É´„ÅÆÊ†πÊú¨ÁöÑËß£Ê±∫
-- Êó¢Â≠òÊ©üËÉΩ„ÇíÂÆåÂÖ®‰øùË≠∑„Åó„Å§„Å§„ÄÅ406„Ç®„É©„Éº„ÇíÊ†πÊú¨Ëß£Ê±∫
-- Option 1: Áµ±ÂêàÂûã‰øÆÊ≠£„Ç¢„Éó„É≠„Éº„ÉÅ

-- =====================================================
-- üîí ‰øÆÊ≠£Ââç„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÉªÁ¢∫Ë™çÂá¶ÁêÜ
-- =====================================================

-- ÁèæÂú®„ÅÆ„Éù„É™„Ç∑„ÉºÁä∂Ê≥Å„Çí„É≠„Ç∞„ÉÜ„Éº„Éñ„É´„Å´Ë®òÈå≤Ôºà„É≠„Éº„É´„Éê„ÉÉ„ÇØÁî®Ôºâ
CREATE TABLE IF NOT EXISTS rls_migration_backup (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  migration_name VARCHAR(100) NOT NULL,
  table_name VARCHAR(100) NOT NULL,
  backup_date timestamp with time zone DEFAULT NOW(),
  policy_name VARCHAR(200),
  policy_definition TEXT,
  policy_roles TEXT[],
  policy_command VARCHAR(20),
  created_at timestamp with time zone DEFAULT NOW()
);

-- ÁèæÂú®„ÅÆ„Éù„É™„Ç∑„ÉºÊÉÖÂ†±„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
INSERT INTO rls_migration_backup (
  migration_name, 
  table_name, 
  policy_name, 
  policy_definition, 
  policy_roles, 
  policy_command
)
SELECT 
  '20240320000015_unified_daily_messages_rls_fix',
  'daily_messages',
  policyname,
  qual,
  ARRAY[roles]::TEXT[],
  cmd
FROM pg_policies 
WHERE tablename = 'daily_messages' AND schemaname = 'public';

-- =====================================================
-- üßπ Êó¢Â≠ò„Éù„É™„Ç∑„Éº„ÅÆÂÆåÂÖ®„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
-- =====================================================

-- „Åô„Åπ„Å¶„ÅÆÊó¢Â≠ò„Éù„É™„Ç∑„Éº„ÇíÂâäÈô§ÔºàÁµ±Âêà„ÅÆ„Åü„ÇÅÔºâ
DROP POLICY IF EXISTS "Users can view own daily messages" ON daily_messages;
DROP POLICY IF EXISTS "Authenticated users can insert own daily messages" ON daily_messages;
DROP POLICY IF EXISTS "Authenticated users can update own daily messages" ON daily_messages;
DROP POLICY IF EXISTS "Service role can manage all daily messages" ON daily_messages;
DROP POLICY IF EXISTS "System can insert daily messages" ON daily_messages;
DROP POLICY IF EXISTS "System can update daily messages" ON daily_messages;
DROP POLICY IF EXISTS "daily_messages_policy" ON daily_messages;
DROP POLICY IF EXISTS "daily_messages_service_policy" ON daily_messages;

-- Êó¢Â≠ò„ÅÆ„Éá„Éê„ÉÉ„Ç∞„Éì„É•„Éº„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
DROP VIEW IF EXISTS daily_messages_debug;

-- =====================================================
-- üéØ Áµ±ÂêàÂûãRLS„Éù„É™„Ç∑„ÉºÂÆüË£Ö
-- =====================================================

-- RLS„ÅåÊúâÂäπ„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
ALTER TABLE daily_messages ENABLE ROW LEVEL SECURITY;

-- ü•á „É°„Ç§„É≥„Éù„É™„Ç∑„ÉºÔºöË™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„ÉºÁî®ÔºàÁµ±ÂêàÂûãÔºâ
-- Êó¢Â≠òÊ©üËÉΩ„ÅÆÂà∂Èôê„ÉªÂà∂Âæ°„ÇíÂÆåÂÖ®Á∂≠ÊåÅ
CREATE POLICY "unified_daily_messages_access" ON daily_messages
  FOR ALL USING (
    -- Êù°‰ª∂1: Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº„Åã„Å§Ëá™ÂàÜ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
    (auth.uid() IS NOT NULL AND auth.uid() = user_id)
    OR
    -- Êù°‰ª∂2: „Çµ„Éº„Éì„Çπ„É≠„Éº„É´ÔºàEdge FunctionsÁî®Ôºâ
    (current_setting('request.jwt.claims', true)::json->>'role' = 'service_role')
  ) WITH CHECK (
    -- ÊåøÂÖ•„ÉªÊõ¥Êñ∞ÊôÇ„ÅÆÂà∂Á¥Ñ
    (auth.uid() IS NOT NULL AND auth.uid() = user_id)
    OR
    (current_setting('request.jwt.claims', true)::json->>'role' = 'service_role')
  );

-- üîß Ë™≠„ÅøÂèñ„ÇäÂ∞ÇÁî®„Éù„É™„Ç∑„ÉºÔºà„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÊúÄÈÅ©ÂåñÔºâ
-- 406„Ç®„É©„ÉºËß£Ê±∫„ÅÆ„Åü„ÇÅ„ÅÆÂ∞ÇÁî®Ë™≠„ÅøÂèñ„Çä„Éù„É™„Ç∑„Éº
CREATE POLICY "daily_messages_read_optimized" ON daily_messages
  FOR SELECT USING (
    -- „Çà„ÇäÊüîËªü„Å™Ë™≠„ÅøÂèñ„ÇäÊù°‰ª∂
    auth.uid() IS NOT NULL 
    AND (
      -- Ëá™ÂàÜ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
      auth.uid() = user_id
      OR
      -- „Çµ„Éº„Éì„Çπ„É≠„Éº„É´
      current_setting('request.jwt.claims', true)::json->>'role' = 'service_role'
      OR
      -- Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº„Åß„ÄÅ„Åã„Å§„ÉÜ„Éº„Éñ„É´„Å´ÈÅ©Âàá„Å™„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„ÇãÂ†¥Âêà
      (auth.role() = 'authenticated' AND user_id IS NOT NULL)
    )
  );

-- =====================================================
-- üìä Ê®©Èôê„Å®„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°„ÅÆÊúÄÈÅ©Âåñ
-- =====================================================

-- „ÉÜ„Éº„Éñ„É´Ê®©Èôê„ÅÆÊúÄÈÅ©Âåñ
-- authenticated„É≠„Éº„É´„Å´ÂøÖË¶Å„Å™Ê®©Èôê„ÇíÊòéÁ§∫ÁöÑ„Å´‰ªò‰∏é
GRANT SELECT ON daily_messages TO authenticated;
GRANT INSERT ON daily_messages TO authenticated;
GRANT UPDATE ON daily_messages TO authenticated;

-- service_role„ÅØÂÖ®Ê®©Èôê
GRANT ALL ON daily_messages TO service_role;

-- anon„É≠„Éº„É´„ÅØÂà∂ÈôêÁöÑ„Ç¢„ÇØ„Çª„Çπ
REVOKE ALL ON daily_messages FROM anon;

-- =====================================================
-- üõ°Ô∏è „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñÊ©üËÉΩ
-- =====================================================

-- „Çª„Ç≠„É•„Ç¢„Å™„Ç¢„ÇØ„Çª„ÇπÁ¢∫Ë™çÈñ¢Êï∞
CREATE OR REPLACE FUNCTION check_daily_messages_access(
  target_user_id UUID DEFAULT NULL
)
RETURNS TABLE (
  can_access boolean,
  current_user_id uuid,
  user_role text,
  access_reason text
) AS $$
DECLARE
  current_uid uuid;
  user_role_name text;
  target_uid uuid;
BEGIN
  -- ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
  current_uid := auth.uid();
  user_role_name := current_setting('role');
  target_uid := COALESCE(target_user_id, current_uid);
  
  -- „Ç¢„ÇØ„Çª„ÇπÂà§ÂÆö
  IF user_role_name = 'service_role' THEN
    RETURN QUERY SELECT true, current_uid, user_role_name, 'service_role_access'::text;
  ELSIF current_uid IS NOT NULL AND current_uid = target_uid THEN
    RETURN QUERY SELECT true, current_uid, user_role_name, 'owner_access'::text;
  ELSIF current_uid IS NOT NULL THEN
    RETURN QUERY SELECT false, current_uid, user_role_name, 'not_owner'::text;
  ELSE
    RETURN QUERY SELECT false, current_uid, user_role_name, 'not_authenticated'::text;
  END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Ê®©ÈôêË®≠ÂÆö
GRANT EXECUTE ON FUNCTION check_daily_messages_access(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION check_daily_messages_access(uuid) TO service_role;

-- =====================================================
-- üîç Ë®∫Êñ≠„ÉªÁõ£Ë¶ñÊ©üËÉΩ„ÅÆÂº∑Âåñ
-- =====================================================

-- Áµ±ÂêàÂûãË®∫Êñ≠„Éì„É•„Éº
CREATE OR REPLACE VIEW daily_messages_access_info AS
SELECT 
  dm.id,
  dm.user_id,
  dm.message_date,
  dm.user_type,
  dm.user_name,
  LEFT(dm.message, 100) || '...' as message_preview,
  dm.generated_at,
  dm.created_at,
  -- „Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°ÊÉÖÂ†±
  auth.uid() as current_user_id,
  current_setting('role') as current_role,
  (auth.uid() = dm.user_id) as is_owner,
  (current_setting('request.jwt.claims', true)::json->>'role' = 'service_role') as is_service_role,
  -- „Ç¢„ÇØ„Çª„ÇπÂèØËÉΩÊÄß
  CASE 
    WHEN auth.uid() = dm.user_id THEN 'owner_access'
    WHEN current_setting('request.jwt.claims', true)::json->>'role' = 'service_role' THEN 'service_access'
    ELSE 'no_access'
  END as access_type
FROM daily_messages dm
WHERE 
  -- „Éì„É•„ÉºËá™‰Ωì„ÅÆ„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°
  auth.uid() IS NOT NULL 
  AND (
    auth.uid() = dm.user_id 
    OR current_setting('request.jwt.claims', true)::json->>'role' = 'service_role'
  );

-- Ê®©ÈôêË®≠ÂÆö
GRANT SELECT ON daily_messages_access_info TO authenticated;
GRANT SELECT ON daily_messages_access_info TO service_role;

-- =====================================================
-- üìà „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ
-- =====================================================

-- „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆÊúÄÈÅ©Âåñ
-- Êó¢Â≠ò„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆÂâäÈô§„Å®ÂÜç‰ΩúÊàê
DROP INDEX IF EXISTS idx_daily_messages_user_date;
DROP INDEX IF EXISTS idx_daily_messages_date_type;
DROP INDEX IF EXISTS idx_daily_messages_generated_at;
DROP INDEX IF EXISTS idx_daily_messages_user_date_type;

-- Áµ±ÂêàÂûãÊúÄÈÅ©Âåñ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
CREATE INDEX idx_daily_messages_unified_access ON daily_messages(user_id, message_date, scheduled_type, generated_at DESC);
CREATE INDEX idx_daily_messages_service_access ON daily_messages(generated_at DESC, user_type) WHERE user_id IS NOT NULL;

-- =====================================================
-- üß™ „ÉÜ„Çπ„Éà„ÉªÊ§úË®ºÊ©üËÉΩ
-- =====================================================

-- RLSÂãï‰Ωú„ÉÜ„Çπ„ÉàÈñ¢Êï∞
CREATE OR REPLACE FUNCTION test_daily_messages_rls()
RETURNS TABLE (
  test_name text,
  test_result boolean,
  test_details text
) AS $$
DECLARE
  test_user_id uuid;
  current_uid uuid;
  test_count bigint;
BEGIN
  current_uid := auth.uid();
  
  -- „ÉÜ„Çπ„Éà1: Âü∫Êú¨ÁöÑ„Å™SELECT„Ç¢„ÇØ„Çª„Çπ
  BEGIN
    SELECT count(*) INTO test_count FROM daily_messages WHERE user_id = current_uid;
    RETURN QUERY SELECT 'basic_select'::text, true, format('Found %s messages', test_count);
  EXCEPTION WHEN OTHERS THEN
    RETURN QUERY SELECT 'basic_select'::text, false, SQLERRM;
  END;
  
  -- „ÉÜ„Çπ„Éà2: „Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°Èñ¢Êï∞
  BEGIN
    SELECT count(*) INTO test_count FROM check_daily_messages_access() WHERE can_access = true;
    RETURN QUERY SELECT 'access_function'::text, (test_count > 0), format('Access function returned %s results', test_count);
  EXCEPTION WHEN OTHERS THEN
    RETURN QUERY SELECT 'access_function'::text, false, SQLERRM;
  END;
  
  -- „ÉÜ„Çπ„Éà3: Ë®∫Êñ≠„Éì„É•„Éº
  BEGIN
    SELECT count(*) INTO test_count FROM daily_messages_access_info;
    RETURN QUERY SELECT 'diagnostic_view'::text, true, format('Diagnostic view shows %s records', test_count);
  EXCEPTION WHEN OTHERS THEN
    RETURN QUERY SELECT 'diagnostic_view'::text, false, SQLERRM;
  END;
  
  RETURN;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Ê®©ÈôêË®≠ÂÆö
GRANT EXECUTE ON FUNCTION test_daily_messages_rls() TO authenticated;
GRANT EXECUTE ON FUNCTION test_daily_messages_rls() TO service_role;

-- =====================================================
-- üìù „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü„É≠„Ç∞
-- =====================================================

-- „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å„É≠„Ç∞
INSERT INTO rls_migration_backup (
  migration_name, 
  table_name, 
  policy_name, 
  policy_definition
) VALUES (
  '20240320000015_unified_daily_messages_rls_fix',
  'daily_messages',
  'MIGRATION_COMPLETED',
  'Unified RLS policies successfully applied'
);

-- =====================================================
-- üìö „Ç≥„É°„É≥„Éà„Éª„Éâ„Ç≠„É•„É°„É≥„Éà
-- =====================================================

COMMENT ON POLICY "unified_daily_messages_access" ON daily_messages IS 
'Áµ±ÂêàÂûãRLS„Éù„É™„Ç∑„Éº: Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº„ÅØËá™ÂàÜ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Åø„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„ÄÅ„Çµ„Éº„Éì„Çπ„É≠„Éº„É´„ÅØÂÖ®„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ';

COMMENT ON POLICY "daily_messages_read_optimized" ON daily_messages IS 
'ÊúÄÈÅ©ÂåñË™≠„ÅøÂèñ„Çä„Éù„É™„Ç∑„Éº: 406„Ç®„É©„ÉºËß£Ê±∫„ÅÆ„Åü„ÇÅ„ÅÆÊüîËªü„Å™Ë™≠„ÅøÂèñ„Çä„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°';

COMMENT ON FUNCTION check_daily_messages_access(uuid) IS 
'daily_messages„ÉÜ„Éº„Éñ„É´„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊ®©ÈôêÁ¢∫Ë™çÈñ¢Êï∞Ôºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®∫Êñ≠Áî®Ôºâ';

COMMENT ON VIEW daily_messages_access_info IS 
'daily_messages„ÅÆÁµ±ÂêàË®∫Êñ≠„Éì„É•„ÉºÔºà„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°Áä∂Ê≥Å„ÅÆÂèØË¶ñÂåñÁî®Ôºâ';

COMMENT ON FUNCTION test_daily_messages_rls() IS 
'RLSÂãï‰ΩúÁ¢∫Ë™ç„ÉÜ„Çπ„ÉàÈñ¢Êï∞Ôºà„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Âæå„ÅÆÂãï‰ΩúÊ§úË®ºÁî®Ôºâ';

COMMENT ON TABLE rls_migration_backup IS 
'RLS„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÉÜ„Éº„Éñ„É´Ôºà„É≠„Éº„É´„Éê„ÉÉ„ÇØ„ÉªÁõ£ÊüªÁî®Ôºâ'; 