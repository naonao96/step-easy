// このファイルは一時的にビルド対象から除外されています。SSR運用時に復活させてください。
// 元の内容は page.tsx_ に移動しました。 
'use client';
export const dynamic = "force-dynamic";

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/atoms/Button';
import { AISuggestionCard } from '@/components/molecules/AISuggestionCard';
import { useTaskStore } from '@/stores/taskStore';
import { FaRobot, FaLightbulb, FaChartLine } from 'react-icons/fa';
import { useAuth } from '@/contexts/AuthContext';

const IconWrapper: React.FC<{ icon: React.ComponentType<{ className?: string }>, className?: string }> = ({ icon: Icon, className }) => (
  <Icon className={className} />
);

interface AISuggestion {
  id: string;
  title: string;
  description: string;
  type: 'task' | 'habit' | 'improvement';
  created_at: string;
}

export default function AISupportPage() {
  const [suggestions, setSuggestions] = useState<AISuggestion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { createTask } = useTaskStore();
  const { user } = useAuth();

  useEffect(() => {
    // TODO: 実際のAIサジェスションを取得するAPIを実装
    const mockSuggestions: AISuggestion[] = [
      {
        id: '1',
        title: '朝のルーティンを作成',
        description: '朝の時間を有効活用するためのルーティンタスクを作成しましょう。',
        type: 'habit',
        created_at: new Date().toISOString(),
      },
      {
        id: '2',
        title: 'タスクの優先順位を見直す',
        description: '現在のタスクの優先順位を最適化することをお勧めします。',
        type: 'improvement',
        created_at: new Date().toISOString(),
      },
      {
        id: '3',
        title: '週間レビュータスクの追加',
        description: '週に一度の振り返りタスクを追加して、進捗を確認しましょう。',
        type: 'task',
        created_at: new Date().toISOString(),
      },
    ];
    setSuggestions(mockSuggestions);
    setIsLoading(false);
  }, []);

  const handleAcceptSuggestion = async (suggestion: AISuggestion) => {
    if (suggestion.type === 'task' || suggestion.type === 'habit') {
      if (!user) return;
      await createTask({
        user_id: user.id,
        title: suggestion.title,
        description: suggestion.description,
        is_habit: suggestion.type === 'habit',
        priority: 'medium',
        status: 'todo',
        due_date: null,
        completed_at: undefined,
        habit_frequency: suggestion.type === 'habit' ? 'daily' : undefined,
        streak_count: 0,
      });
    }
    setSuggestions(suggestions.filter(s => s.id !== suggestion.id));
  };

  const handleRejectSuggestion = (suggestionId: string) => {
    // 却下されたサジェスションをリストから削除
    setSuggestions(suggestions.filter(s => s.id !== suggestionId));
  };

  const renderSuggestions = () => {
    if (isLoading) {
      return (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">提案を読み込み中...</p>
        </div>
      );
    }

    if (suggestions.length === 0) {
      return (
        <div className="text-center py-8 bg-white rounded-lg shadow-md">
          <p className="text-gray-600">現在、新しい提案はありません。</p>
          <Button
            variant="primary"
            className="mt-4"
            onClick={() => {/* TODO: 新しいAIサジェスションを取得 */}}
          >
            新しい提案を取得
          </Button>
        </div>
      );
    }

    return suggestions.map((suggestion) => (
      <AISuggestionCard
        key={suggestion.id}
        title={suggestion.title}
        description={suggestion.description}
        type={suggestion.type}
        onAccept={() => handleAcceptSuggestion(suggestion)}
        onReject={() => handleRejectSuggestion(suggestion.id)}
      />
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-2xl font-bold text-gray-900">AIサポート</h1>
          <Button
            variant="primary"
            onClick={() => {/* TODO: 新しいAIサジェスションを取得 */}}
            leftIcon={FaRobot}
          >
            新しい提案を取得
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center space-x-3 mb-4">
              <span className="w-6 h-6 text-blue-600">
                {FaRobot({})}
              </span>
              <h2 className="text-lg font-semibold text-gray-900">AIサポートの活用方法</h2>
            </div>
            <p className="text-sm text-gray-600">
              AIがあなたのタスク管理をサポートします。定期的に新しい提案を確認して、
              効率的なタスク管理を実現しましょう。
            </p>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center space-x-3 mb-4">
              <span className="w-6 h-6 text-yellow-600">
                {FaLightbulb({})}
              </span>
              <h2 className="text-lg font-semibold text-gray-900">提案の種類</h2>
            </div>
            <ul className="text-sm text-gray-600 space-y-2">
              <li>• タスク提案：新しいタスクの作成を提案</li>
              <li>• 習慣提案：継続的な習慣の形成を提案</li>
              <li>• 改善提案：タスク管理の改善点を提案</li>
            </ul>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center space-x-3 mb-4">
              <span className="w-6 h-6 text-green-600">
                {FaChartLine({})}
              </span>
              <h2 className="text-lg font-semibold text-gray-900">活用のコツ</h2>
            </div>
            <ul className="text-sm text-gray-600 space-y-2">
              <li>• 定期的に新しい提案を確認</li>
              <li>• 自分に合った提案を採用</li>
              <li>• フィードバックを提供して精度向上</li>
            </ul>
          </div>
        </div>

        <h2 className="text-xl font-semibold text-gray-900 mb-4">現在の提案</h2>
        <div className="grid grid-cols-1 gap-4">
          {renderSuggestions()}
        </div>
      </div>
    </div>
  );
} 